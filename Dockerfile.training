# Training-enabled Dockerfile for Cloud Run with GPU
FROM nvidia/cuda:12.1.0-devel-ubuntu20.04

# Avoid interactive prompts
ENV DEBIAN_FRONTEND=noninteractive

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3 \
    python3-pip \
    python3-dev \
    git \
    wget \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements and install Python dependencies
COPY requirements.txt .
RUN python3 -m pip install --no-cache-dir -r requirements.txt

# Copy application code and data
COPY . .

# Create model directories
RUN mkdir -p /app/models/joe /app/models/lex

# Set environment variables
ENV PYTHONPATH=/app
ENV PYTORCH_CUDA_ALLOC_CONF=max_split_size_mb:512
ENV CUDA_VISIBLE_DEVICES=0

# OPTION 1: Train during build (uncomment to train in container)
# RUN python3 scripts/train_lora.py --persona joe --data data/joe_transcripts.json --output models/joe --epochs 3 --batch_size 2

# OPTION 2: Train at startup (uncomment for runtime training)
# RUN echo '#!/bin/bash\npython3 scripts/train_lora.py --persona joe --data data/joe_transcripts.json --output models/joe --epochs 3 --batch_size 2\npython3 -m uvicorn api.server:app --host 0.0.0.0 --port 8080 --workers 1' > /app/train_and_serve.sh
# RUN chmod +x /app/train_and_serve.sh

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default: Run inference server (use base models)
CMD ["python3", "-m", "uvicorn", "api.server:app", "--host", "0.0.0.0", "--port", "8080", "--workers", "1"]

# Alternative: Train then serve (uncomment to use)
# CMD ["/app/train_and_serve.sh"]